CAN Translation Module
=========================

## Description

The CAN translation module code runs on an Arduino-compatible microcontroller
connected to one or more CAN buses. It receives either all CAN messages or a
filtered subset, performs any unit conversion or factoring required and outputs
a generic version to a USB interface.

For more documentation, see the [vehicle
interface](http://openxcplatform.com/vehicle-interface/index.html) section on
the [OpenXC website](http://openxcplatform.com).

**Hey, developers!**

Most OpenXC users do not need this, but [additional documentation][dev-docs] is
available for developers.

### Pre-built Binary

See the [firmware
section](http://openxcplatform.com/vehicle-interface/firmware.html) of the
[OpenXC website](http://openxcplatform.com).

## Output Specification

See the [output
format](http://openxcplatform.com/vehicle-interface/output-format.html) section
of the [OpenXC][] website for details on the output format.

## Pre-built Binary

If you've downloaded a pre-built binary for a specific vehicle, see the [firmware
section](http://openxcplatform.com/vehicle-interface/firmware.html) of the
[OpenXC website](http://openxcplatform.com) for instructions on how to flash
your CAN translator. Most users do not need to set up the full development
described in these docs.

## Testing

The [OpenXC Python library](https://github.com/openxc/openxc-python), in
particular the `openxc-dashboard` tool, is useful for testing the CAN translator with a regular
computer, to verify the data received from a vehicle before introducing an
Android device. Documentation for this tool (and the list of required
dependencies) is available on the OpenXC [vehicle interface
testing](http://openxcplatform.com/vehicle-interface/testing.html) page.

## Traces

You can record a trace of JSON messages from the CAN reader for use in testing.
First, install the [OpenXC Python library](python-lib). Then attach the CAN
translator to your computer via USB and use the `openxc-dump` program to print
all raw JSON messages to stdout. Redirect this to a file, and you've got your
trace. This can be used directly by the openxc-android library, for example.

    $ openxc-dump > vehicle-data.trace

[python-lib]: https://github.com/openxc/openxc-python

## Output Specification

See the [output
format](http://openxcplatform.com/vehicle-interface/output-format.html) section
of the [OpenXC][] website for details on the output format.

## Contributing

Please see our [Contibution Guide](https://github.com/openxc/cantranslator/blob/master/CONTRIBUTING.mkd)
and additional [developer documentation](dev-docs).

## License

This source code is available under the BSD license.

[dev-docs]: https://github.com/openxc/cantranslator/blob/master/README_developers.mkd
